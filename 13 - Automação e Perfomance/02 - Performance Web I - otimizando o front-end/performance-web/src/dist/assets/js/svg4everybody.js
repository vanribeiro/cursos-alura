/*! For license information please see svg4everybody.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./src/site/assets/js/svg4everybody.js":()=>{eval("/*! svg4everybody v2.0.3 | github.com/jonathantneal/svg4everybody */\n\nfunction embed(svg, target) {\n\t// if the target exists\n\tif (target) {\n\t\t// create a document fragment to hold the contents of the target\n\t\tvar fragment = document.createDocumentFragment();\n\n\t\t// cache the closest matching viewBox\n\t\tvar viewBox = !svg.getAttribute('viewBox') && target.getAttribute('viewBox');\n\n\t\t// conditionally set the viewBox on the svg\n\t\tif (viewBox) {\n\t\t\tsvg.setAttribute('viewBox', viewBox);\n\t\t}\n\n\t\t// clone the target\n\t\tvar clone = target.cloneNode(true);\n\n\t\t// copy the contents of the clone into the fragment\n\t\twhile (clone.childNodes.length) {\n\t\t\tfragment.appendChild(clone.firstChild);\n\t\t}\n\n\t\t// append the fragment into the svg\n\t\tsvg.appendChild(fragment);\n\t}\n}\n\nfunction loadreadystatechange(xhr) {\n\t// listen to changes in the request\n\txhr.onreadystatechange = function () {\n\t\t// if the request is ready\n\t\tif (xhr.readyState === 4) {\n\t\t\t// get the cached html document\n\t\t\tvar cachedDocument = xhr._cachedDocument;\n\n\t\t\t// ensure the cached html document based on the xhr response\n\t\t\tif (!cachedDocument) {\n\t\t\t\tcachedDocument = xhr._cachedDocument = document.implementation.createHTMLDocument('');\n\n\t\t\t\tcachedDocument.body.innerHTML = xhr.responseText;\n\n\t\t\t\txhr._cachedTarget = {};\n\t\t\t}\n\n\t\t\t// clear the xhr embeds list and embed each item\n\t\t\txhr._embeds.splice(0).map(function (item) {\n\t\t\t\t// get the cached target\n\t\t\t\tvar target = xhr._cachedTarget[item.id];\n\n\t\t\t\t// ensure the cached target\n\t\t\t\tif (!target) {\n\t\t\t\t\ttarget = xhr._cachedTarget[item.id] = cachedDocument.getElementById(item.id);\n\t\t\t\t}\n\n\t\t\t\t// embed the target into the svg\n\t\t\t\tembed(item.svg, target);\n\t\t\t});\n\t\t}\n\t};\n\n\t// test the ready state change immediately\n\txhr.onreadystatechange();\n}\n\nfunction svg4everybody(rawopts) {\n\tvar opts = Object(rawopts);\n\n\t// create legacy support variables\n\tvar nosvg;\n\tvar fallback;\n\n\t// if running with legacy support\n\tif (LEGACY_SUPPORT) {\n\t\t// configure the fallback method\n\t\tfallback = opts.fallback || function (src) {\n\t\t\treturn src.replace(/\\?[^#]+/, '').replace('#', '.').replace(/^\\./, '') + '.png' + (/\\?[^#]+/.exec(src) || [''])[0];\n\t\t};\n\n\t\t// set whether to shiv <svg> and <use> elements and use image fallbacks\n\t\tnosvg = 'nosvg' in opts ? opts.nosvg : /\\bMSIE [1-8]\\b/.test(navigator.userAgent);\n\n\t\t// conditionally shiv <svg> and <use>\n\t\tif (nosvg) {\n\t\t\tdocument.createElement('svg');\n\t\t\tdocument.createElement('use');\n\t\t}\n\t}\n\n\t// set whether the polyfill will be activated or not\n\tvar polyfill;\n\tvar olderIEUA = /\\bMSIE [1-8]\\.0\\b/;\n\tvar newerIEUA = /\\bTrident\\/[567]\\b|\\bMSIE (?:9|10)\\.0\\b/;\n\tvar webkitUA = /\\bAppleWebKit\\/(\\d+)\\b/;\n\tvar olderEdgeUA = /\\bEdge\\/12\\.(\\d+)\\b/;\n\n\tif ('polyfill' in opts) {\n\t\tpolyfill = opts.polyfill;\n\t} else if (LEGACY_SUPPORT) {\n\t\tpolyfill = olderIEUA.test(navigator.userAgent) || newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;\n\t} else {\n\t\tpolyfill = newerIEUA.test(navigator.userAgent) || (navigator.userAgent.match(olderEdgeUA) || [])[1] < 10547 || (navigator.userAgent.match(webkitUA) || [])[1] < 537;\n\t}\n\n\t// create xhr requests object\n\tvar requests = {};\n\n\t// use request animation frame or a timeout to search the dom for svgs\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\t// get a live collection of use elements on the page\n\tvar uses = document.getElementsByTagName('use');\n\n\tfunction oninterval() {\n\t\t// get the cached <use> index\n\t\tvar index = 0;\n\n\t\t// while the index exists in the live <use> collection\n\t\twhile (index < uses.length) {\n\t\t\t// get the current <use>\n\t\t\tvar use = uses[index];\n\n\t\t\t// get the current <svg>\n\t\t\tvar svg = use.parentNode;\n\n\t\t\tif (svg && /svg/i.test(svg.nodeName)) {\n\t\t\t\tvar src = use.getAttribute('xlink:href');\n\n\t\t\t\t// if running with legacy support\n\t\t\t\tif (LEGACY_SUPPORT && nosvg) {\n\t\t\t\t\t// create a new fallback image\n\t\t\t\t\tvar img = document.createElement('img');\n\n\t\t\t\t\t// force display in older IE\n\t\t\t\t\timg.style.cssText = 'display:inline-block;height:100%;width:100%';\n\n\t\t\t\t\t// set the fallback size using the svg size\n\t\t\t\t\timg.setAttribute('width', svg.getAttribute('width') || svg.clientWidth);\n\t\t\t\t\timg.setAttribute('height', svg.getAttribute('height') || svg.clientHeight);\n\n\t\t\t\t\t// set the fallback src\n\t\t\t\t\timg.src = fallback(src, svg, use);\n\n\t\t\t\t\t// replace the <use> with the fallback image\n\t\t\t\t\tsvg.replaceChild(img, use);\n\t\t\t\t} else if (polyfill) {\n\t\t\t\t\tif (!opts.validate || opts.validate(src, svg, use)) {\n\t\t\t\t\t\t// remove the <use> element\n\t\t\t\t\t\tsvg.removeChild(use);\n\n\t\t\t\t\t\t// parse the src and get the url and id\n\t\t\t\t\t\tvar srcSplit = src.split('#');\n\t\t\t\t\t\tvar url = srcSplit.shift();\n\t\t\t\t\t\tvar id = srcSplit.join('#');\n\n\t\t\t\t\t\t// if the link is external\n\t\t\t\t\t\tif (url.length) {\n\t\t\t\t\t\t\t// get the cached xhr request\n\t\t\t\t\t\t\tvar xhr = requests[url];\n\n\t\t\t\t\t\t\t// ensure the xhr request exists\n\t\t\t\t\t\t\tif (!xhr) {\n\t\t\t\t\t\t\t\txhr = requests[url] = new XMLHttpRequest();\n\n\t\t\t\t\t\t\t\txhr.open('GET', url);\n\n\t\t\t\t\t\t\t\txhr.send();\n\n\t\t\t\t\t\t\t\txhr._embeds = [];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// add the svg and id as an item to the xhr embeds list\n\t\t\t\t\t\t\txhr._embeds.push({\n\t\t\t\t\t\t\t\tsvg: svg,\n\t\t\t\t\t\t\t\tid: id\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// prepare the xhr ready state change event\n\t\t\t\t\t\t\tloadreadystatechange(xhr);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// embed the local id into the svg\n\t\t\t\t\t\t\tembed(svg, document.getElementById(id));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// increase the index when the previous value was not \"valid\"\n\t\t\t\t++index;\n\t\t\t}\n\t\t}\n\n\t\t// continue the interval\n\t\trequestAnimationFrame(oninterval, 67);\n\t}\n\n\t// conditionally start the interval if the polyfill is active\n\tif (polyfill) {\n\t\toninterval();\n\t}\n}\n\nsvg4everybody();\n\n//# sourceURL=webpack://curso-alura-site/./src/site/assets/js/svg4everybody.js?")}},__webpack_exports__={};__webpack_modules__["./src/site/assets/js/svg4everybody.js"]()})();